//
// # CopilotChat Application Settings
// 
// # Quickstart
//  - Update the "Completion" and "Embedding" sections below to use your AI services.
// 
// # Secrets
// Consider populating secrets, such as "Key" and "ConnectionString" properties, from dotnet's user-secrets when running locally.
// https://learn.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-7.0&tabs=windows#secret-manager       
// Values in user secrets and (optionally) Key Vault take precedence over those in this file.
//
{
  //
  // Service configuration
  // - Optionally set SemanticSkillsDirectory to the directory from which to load semantic skills (e.g., "./SemanticSkills").
  // - Optionally set KeyVaultUri to the URI of the Key Vault for secrets (e.g., "https://contoso.vault.azure.net/").
  //
  "Service": {
    "SemanticSkillsDirectory": "",
    "KeyVaultUri": ""
  },

  //
  // Completions are used for generating AI responses from the user's input.
  // https://platform.openai.com/docs/guides/chat
  // To use Azure OpenAI as the AI completion service:
  //  - Set "AIService" to "AzureOpenAI"
  //  - Set "DeploymentOrModelId" to the name of the deployment to use (e.g., "gpt-35-turbo", "gpt-4", etc.)
  //  - Set "Endpoint" to the endpoint of your Azure OpenAI instance (e.g., "https://contoso.openai.azure.com")
  //  - Set "Key" using dotnet's user secrets (see above) (i.e. dotnet user-secrets set "Completion:Key" "MY_AZURE_OPENAI_KEY")
  // 
  // To use OpenAI as the AI completion service:
  //  - Set "AIService" to "OpenAI"
  //  - Set "DeploymentOrModelId" to the name of the deployment to use (e.g., "gpt-3.5-turbo", "gpt-4", etc.)
  //  - Set "Key" using dotnet's user secrets (see above) (i.e. dotnet user-secrets set "Completion:Key" "MY_OPENAI_KEY")
  //
  "Completion": {
    "Label": "Completion",
    "AIService": "OpenAI",
    "DeploymentOrModelId": "gpt-3.5-turbo",
    "Endpoint": "" // ignored when AIService is "OpenAI"
    // "Key": ""
  },

  //
  // Embeddings are used for semantically encoding memories.
  // This section is ignored when MemoriesStore:Type is set to Azure Cognitive Search.
  // https://platform.openai.com/docs/guides/embeddings
  // To use Azure OpenAI as the AI embedding service:
  //  - Set "AIService" to "AzureOpenAI"
  //  - Set "DeploymentOrModelId" to the name of the deployment to use (e.g., "text-embedding-ada-002")
  //  - Set "Endpoint" to the endpoint of your Azure OpenAI instance (e.g., "https://contoso.openai.azure.com")
  //  - Set "Key" using dotnet's user secrets (see above) (i.e. dotnet user-secrets set "Embedding:Key" "MY_AZURE_OPENAI_KEY")
  // 
  // To use OpenAI as the AI embedding service:
  //  - Set "AIService" to "OpenAI"
  //  - Set "DeploymentOrModelId" to the name of the deployment to use (e.g., "text-embedding-ada-002" )
  //  - Set "Key" using dotnet's user secrets (see above) (i.e. dotnet user-secrets set "Embedding:Key" "MY_OPENAI_KEY")
  //
  "Embedding": {
    "Label": "Embeddings",
    "AIService": "OpenAI",
    "DeploymentOrModelId": "text-embedding-ada-002",
    "Endpoint": "" // ignored when AIService is "OpenAI"
    // "Key": ""
  },

  //
  // Optional Azure Speech service configuration for providing Azure Speech access tokens.
  // - Set the Region to the region of your Azure Speech resource (e.g., "westus").
  // - Set the Key using dotnet's user secrets (see above) (i.e. dotnet user-secrets set "AzureSpeech:Key" "MY_AZURE_SPEECH_KEY")
  // 
  "AzureSpeech": {
    "Region": "eastus"
    //"Key": ""
  },

  //
  // Authorization configuration to gate access to the service.
  //  - Supported Types are "None", "ApiKey", or "AzureAd".
  //  - Set ApiKey using dotnet's user secrets (see above) (i.e. dotnet user-secret set "Authorization:ApiKey" "MY_API_KEY")
  //
  "Authorization": {
    "Type": "None",
    "ApiKey": "",
    "AzureAd": {
      "Instance": "https://login.microsoftonline.com/",
      "TenantId": "",
      "ClientId": "",
      "Scopes": "access_as_user" // Scopes that the client app requires to access the API
    }
  },

  //
  // Chat stores are used for storing chat sessions and messages.
  // - Supported Types are "volatile", "filesystem", or "cosmos".
  //
  "ChatStore": {
    "Type": "volatile",
    "Filesystem": {
      "FilePath": "./data/chatstore.json"
    },
    "Cosmos": {
      "Database": "CopilotChat",
      "ChatSessionsContainer": "chatsessions",
      "ChatMessagesContainer": "chatmessages"
      // "ConnectionString": // dotnet user-secrets set "ChatStore:Cosmos:ConnectionString" "MY_COSMOS_CONNECTION_STRING"
    }
  },

  //
  // Memories stores are used for storing new memories and retrieving semantically similar memories.
  // - Supported Types are "volatile", "qdrant", or "azurecognitivesearch".
  // - When using Qdrant or Azure Cognitive Search, see ./README.md for deployment instructions.
  // - The "Semantic Search" feature must be enabled on Azure Cognitive Search. 
  // - The Embedding configuration above will not be used when Azure Cognitive Search is selected.
  //
  "MemoriesStore": {
    "Type": "volatile",
    "Qdrant": {
      "Host": "http://localhost",
      "Port": "6333",
      "VectorSize": 1536
    },
    "AzureCognitiveSearch": {
      "Endpoint": ""
      // "Key": "" // dotnet user-secrets set "MemoriesStore:AzureCognitiveSearch:Key" "MY_ACS_KEY"
    }
  },

  //
  // Document import configuration
  // - Global documents are documents that are shared across all users.
  // - User documents are documents that are specific to a user.
  // - Default token limits are suggested by OpenAI:
  // https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them
  // - Prevent large uploads by setting a file size limit (in bytes) as suggested here:
  // https://learn.microsoft.com/en-us/aspnet/core/mvc/models/file-uploads?view=aspnetcore-6.0
  // - Deduplication similarity threshold is used to determine if a document is similar to
  //   another document that is already in memory:
  //   - The higher the value, the more document memories can be similar without being eliminated as duplicates.
  //
  "DocumentMemory": {
    "GlobalDocumentCollectionName": "global-documents",
    "UserDocumentCollectionNamePrefix": "user-documents-",
    "DocumentLineSplitMaxTokens": 30,
    "DocumentParagraphSplitMaxLines": 100,
    "FileSizeLimit": 1000000,
    "DeduplicationSimilarityThreshold": 0.8
  },

  //
  // Planner can determine which skill functions, if any, need to be used to fullfill a user's request.
  // https://learn.microsoft.com/en-us/semantic-kernel/concepts-sk/planner
  // - Set Enabled to false to disable the planner which can save a round-trip to the AI service but will disable plug-in support.
  //
  // To use Azure OpenAI with the planner:
  //  - Set "AIService" to "AzureOpenAI"
  //  - Set "DeploymentOrModelId" to the name of the deployment to use (e.g., "gpt-35-turbo")
  //  - Set "Endpoint" to the endpoint of your Azure OpenAI instance (e.g., "https://contoso.openai.azure.com")
  //  - Set "Key" using dotnet's user secrets (see above) (i.e. dotnet user-secrets set "Planner:AIService:Key" "MY_AZURE_OPENAI_KEY")
  //
  // To use OpenAI with the planner:
  //  - Set "AIService" to "OpenAI"
  //  - Set "DeploymentOrModelId" to the name of the deployment to use (e.g., "gpt-3.5-turbo" )
  //  - Set "Key" using dotnet's user secrets (see above) (i.e. dotnet user-secrets set "Planner:AIService:Key" "MY_OPENAI_KEY")
  //
  "Planner": {
    "Enabled": false,
    "AIService": {
      "AIService": "OpenAI",
      "DeploymentOrModelId": "gpt-3.5-turbo",
      "Endpoint": "" // ignored when AIService is "OpenAI"
      // "Key": ""
    }
  },

  //
  // Filter for hostnames app can bind to
  //
  "AllowedHosts": "*",

  //
  // CORS
  //
  "AllowedOrigins": [
    "http://localhost:3000"
  ],


  //
  // The schema information for a serialized bot that is supported by this applocation.
  //
  "BotSchema": {
    "Name": "CopilotChat",
    "Version": 1
  },

  //
  // Server endpoints
  //
  "Kestrel": {
    "Endpoints": {
      "Https": {
        "Url": "https://localhost:40443"
      }
    }
  },

  //
  // Logging configuration
  //
  "Logging": {
    "LogLevel": {
      "Default": "Warning",
      "SemanticKernel.Service": "Information",
      "Microsoft.SemanticKernel": "Information",
      "Microsoft.AspNetCore.Hosting": "Information",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },

  //
  // Application Insights configuration
  //
  "ApplicationInsights": {
    "ConnectionString": ""
  }
}
